{"ast":null,"code":"var _jsxFileName = \"/home/dheeraj/Documents/Project/admitKard/client/src/Components/AddQuestion.js\";\nimport React, { Component, createRef } from \"react\";\nimport { APIUrls } from \"../helpers/urls\";\nimport swal from \"sweetalert\";\n\nclass AddQuestion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.showAlert = (title, text, type) => {\n      swal({\n        title: title,\n        text: text,\n        icon: type,\n        button: \"Ok\"\n      });\n    };\n\n    this.checkForEmptyField = () => {\n      const {\n        query,\n        topic\n      } = this.state.formInput;\n\n      if (query.length === 0) {\n        this.showAlert(\"Missing Field\", \"Please Enter Question\", \"warning\");\n        return false;\n      } else if (topic.length === 0) {\n        this.showAlert(\"Missing Field\", \"Please Enter Topic\", \"warning\");\n        return false;\n      }\n\n      return true;\n    };\n\n    this.handleAddProductButtonStatus = () => {\n      this.setState({\n        add_product_button_status: !this.state.add_product_button_status\n      });\n    };\n\n    this.handleChange = (label, value) => {\n      if (label === \"query\") {\n        this.setState({\n          formInput: { ...this.state.formInput,\n            query: value\n          }\n        });\n      } else if (label === \"topic\") {\n        this.setState({\n          formInput: { ...this.state.formInput,\n            topic: value\n          }\n        });\n      } else if (label === \"currentTag\") {\n        this.setState({\n          formInput: { ...this.state.formInput,\n            currentTag: value\n          }\n        });\n      }\n    };\n\n    this.handleAddTagButton = e => {\n      e.preventDefault();\n\n      if (this.state.formInput.currentTag.length === 0) {\n        this.showAlert(\"Missing Field\", \"Tag Field is Empty\", \"warning\");\n        return;\n      }\n\n      const {\n        tagList,\n        currentTag\n      } = this.state.formInput;\n      tagList.push(currentTag);\n      this.setState({\n        formInput: { ...this.state.formInput,\n          tagList: tagList,\n          currentTag: \"\"\n        }\n      });\n    };\n\n    this.createNewQuestion = () => {\n      const {\n        query,\n        tagList,\n        topic\n      } = this.state.formInput;\n      let formBody = {\n        query: query,\n        tagList: tagList,\n        topic: topic\n      };\n      const url = APIUrls.createQuestion();\n      fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(formBody)\n      }).then(response => response.json()).then(data => {\n        if (data.success) {\n          this.showAlert(\"Added\", \"New Question Added\", \"success\");\n          this.setState({\n            formInput: {\n              query: \"\",\n              topic: \"\",\n              currentTag: \"\",\n              tagList: []\n            }\n          });\n          this.state.formRef.current.reset();\n        } else {\n          this.showAlert(\"Error\", \"Error in adding new question\", \"warning\");\n        }\n      });\n    };\n\n    this.handleClearAllTag = e => {\n      e.preventDefault();\n      this.setState({\n        formInput: { ...this.state.formInput,\n          tagList: []\n        }\n      });\n    };\n\n    this.handleSubmitButton = e => {\n      e.preventDefault();\n      let formFieldStatus = this.checkForEmptyField();\n\n      if (!formFieldStatus) {\n        return;\n      }\n\n      this.createNewQuestion();\n    };\n\n    this.state = {\n      add_product_button_status: false,\n      formRef: createRef(),\n      formInput: {\n        query: \"\",\n        topic: \"\",\n        currentTag: \"\",\n        tagList: []\n      }\n    };\n  }\n\n  render() {\n    const {\n      add_product_button_status\n    } = this.state;\n    const {\n      tagList,\n      currentTag,\n      topic,\n      query\n    } = this.state.formInput;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"add-question-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleAddProductButtonStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, add_product_button_status ? /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-times\",\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }) : \"Add Question\"), add_product_button_status && /*#__PURE__*/React.createElement(\"form\", {\n      ref: this.state.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 15\n      }\n    }, \"Query :\"), /*#__PURE__*/React.createElement(\"input\", {\n      placeholder: \"Query\",\n      onChange: e => {\n        this.handleChange(\"query\", e.target.value);\n      },\n      value: query,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 15\n      }\n    }, \"Topic :\"), /*#__PURE__*/React.createElement(\"input\", {\n      placeholder: \"Topic\",\n      onChange: e => {\n        this.handleChange(\"topic\", e.target.value);\n      },\n      value: topic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"input-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"lable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }, \"Tags :\"), /*#__PURE__*/React.createElement(\"input\", {\n      placeholder: \"Tag\",\n      onChange: e => {\n        this.handleChange(\"currentTag\", e.target.value);\n      },\n      value: currentTag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 15\n      }\n    }, tagList.map(item => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 26\n        }\n      }, item);\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tag-container-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"tag-button\",\n      onClick: this.handleAddTagButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, \"Add Tag\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"tag-button\",\n      onClick: this.handleClearAllTag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }\n    }, \"Clear All Tags\"))), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleSubmitButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }\n    }, \"Add Question\")));\n  }\n\n}\n\nexport default AddQuestion;","map":{"version":3,"sources":["/home/dheeraj/Documents/Project/admitKard/client/src/Components/AddQuestion.js"],"names":["React","Component","createRef","APIUrls","swal","AddQuestion","constructor","props","showAlert","title","text","type","icon","button","checkForEmptyField","query","topic","state","formInput","length","handleAddProductButtonStatus","setState","add_product_button_status","handleChange","label","value","currentTag","handleAddTagButton","e","preventDefault","tagList","push","createNewQuestion","formBody","url","createQuestion","fetch","method","headers","body","JSON","stringify","then","response","json","data","success","formRef","current","reset","handleClearAllTag","handleSubmitButton","formFieldStatus","render","target","map","item"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from \"react\";\nimport { APIUrls } from \"../helpers/urls\";\nimport swal from \"sweetalert\";\n\nclass AddQuestion extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      add_product_button_status: false,\n      formRef: createRef(),\n      formInput: {\n        query: \"\",\n        topic: \"\",\n        currentTag: \"\",\n        tagList: [],\n      },\n    };\n  }\n\n  showAlert = (title, text, type) => {\n    swal({\n      title: title,\n      text: text,\n      icon: type,\n      button: \"Ok\",\n    });\n  };\n\n  checkForEmptyField = () => {\n    const { query, topic } = this.state.formInput;\n    if (query.length === 0) {\n      this.showAlert(\"Missing Field\", \"Please Enter Question\", \"warning\");\n      return false;\n    } else if (topic.length === 0) {\n      this.showAlert(\"Missing Field\", \"Please Enter Topic\", \"warning\");\n      return false;\n    }\n    return true;\n  };\n\n  handleAddProductButtonStatus = () => {\n    this.setState({\n      add_product_button_status: !this.state.add_product_button_status,\n    });\n  };\n\n  handleChange = (label, value) => {\n    if (label === \"query\") {\n      this.setState({\n        formInput: {\n          ...this.state.formInput,\n          query: value,\n        },\n      });\n    } else if (label === \"topic\") {\n      this.setState({\n        formInput: {\n          ...this.state.formInput,\n          topic: value,\n        },\n      });\n    } else if (label === \"currentTag\") {\n      this.setState({\n        formInput: {\n          ...this.state.formInput,\n          currentTag: value,\n        },\n      });\n    }\n  };\n\n  handleAddTagButton = (e) => {\n    e.preventDefault();\n\n    if (this.state.formInput.currentTag.length === 0) {\n      this.showAlert(\"Missing Field\", \"Tag Field is Empty\", \"warning\");\n      return;\n    }\n    const { tagList, currentTag } = this.state.formInput;\n    tagList.push(currentTag);\n    this.setState({\n      formInput: { ...this.state.formInput, tagList: tagList, currentTag: \"\" },\n    });\n  };\n\n  createNewQuestion = () => {\n    const { query, tagList, topic } = this.state.formInput;\n    let formBody = {\n      query: query,\n      tagList: tagList,\n      topic: topic,\n    };\n\n    const url = APIUrls.createQuestion();\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(formBody),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.success) {\n          this.showAlert(\"Added\", \"New Question Added\", \"success\");\n          this.setState({\n            formInput: {\n              query: \"\",\n              topic: \"\",\n              currentTag: \"\",\n              tagList: [],\n            },\n          });\n          this.state.formRef.current.reset();\n        } else {\n          this.showAlert(\"Error\", \"Error in adding new question\", \"warning\");\n        }\n      });\n  };\n\n  handleClearAllTag = (e) => {\n    e.preventDefault();\n    this.setState({ formInput: { ...this.state.formInput, tagList: [] } });\n  };\n\n  handleSubmitButton = (e) => {\n    e.preventDefault();\n    let formFieldStatus = this.checkForEmptyField();\n    if (!formFieldStatus) {\n      return;\n    }\n    this.createNewQuestion();\n  };\n\n  render() {\n    const { add_product_button_status } = this.state;\n    const { tagList, currentTag, topic, query } = this.state.formInput;\n    return (\n      <div className=\"add-question-container\">\n        <button onClick={this.handleAddProductButtonStatus}>\n          {add_product_button_status ? (\n            <i className=\"fa fa-times\" aria-hidden=\"true\"></i>\n          ) : (\n            \"Add Question\"\n          )}\n        </button>\n        {add_product_button_status && (\n          <form ref={this.state.formRef}>\n            <div className=\"input-container\">\n              <div className=\"lable\">Query :</div>\n              <input\n                placeholder=\"Query\"\n                onChange={(e) => {\n                  this.handleChange(\"query\", e.target.value);\n                }}\n                value={query}\n              />\n            </div>\n            <div className=\"input-container\">\n              <div className=\"lable\">Topic :</div>\n              <input\n                placeholder=\"Topic\"\n                onChange={(e) => {\n                  this.handleChange(\"topic\", e.target.value);\n                }}\n                value={topic}\n              />\n            </div>\n            <div className=\"input-container\">\n              <div className=\"lable\">Tags :</div>\n              <input\n                placeholder=\"Tag\"\n                onChange={(e) => {\n                  this.handleChange(\"currentTag\", e.target.value);\n                }}\n                value={currentTag}\n              />\n              <ul>\n                {tagList.map((item) => {\n                  return <li>{item}</li>;\n                })}\n              </ul>\n              <div className=\"tag-container-button\">\n                <button\n                  className=\"tag-button\"\n                  onClick={this.handleAddTagButton}\n                >\n                  Add Tag\n                </button>\n                <button className=\"tag-button\" onClick={this.handleClearAllTag}>\n                  Clear All Tags\n                </button>\n              </div>\n            </div>\n\n            <button onClick={this.handleSubmitButton}>Add Question</button>\n          </form>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AddQuestion;\n"]},"metadata":{},"sourceType":"module"}